#@ load("@ytt:data", "data")

#@ load("@ci:notifications.lib.yml", "notify_slack")
#@ load("@ci:resources.lib.yml", "resources")
#@ load("@ci:clusters.lib.yml", "clusters")
#@ load("@ci:cf_for_k8s.lib.yml", "cf_for_k8s")
#@ load("@ci:common.lib.yml", "git_commit")

groups:
- name: all
  jobs:
  - generate-cf-for-k8s-values
  - #@ "deploy-cf-for-k8s-" + data.values.gcp.cluster_name
  - #@ "smoke-tests-" + data.values.gcp.cluster_name
  - #@ "delete-cluster-" + data.values.gcp.cluster_name
  - #@ "create-cluster-" + data.values.gcp.cluster_name
- name: #@ "cf-for-k8s-" + data.values.gcp.cluster_name
  jobs:
  - generate-cf-for-k8s-values
  - #@ "deploy-cf-for-k8s-" + data.values.gcp.cluster_name
  - #@ "smoke-tests-" + data.values.gcp.cluster_name
- name: #@ "cluster-" + data.values.gcp.cluster_name
  jobs:
  - #@ "delete-cluster-" + data.values.gcp.cluster_name
  - #@ "create-cluster-" + data.values.gcp.cluster_name

jobs:
- name: #@ "delete-cluster-" + data.values.gcp.cluster_name
  plan:
  #@ if data.values.enable_cf4k8s_redeploy == "true":
  - get: delete-timer
    trigger: true
  #@ end
  - get: ci-resources
  - task: delete-kubernetes-cluster
    config: #@ clusters.delete_kubernetes_cluster(data.values.gcp.cluster_name)
  - get: cluster-state
  - task: delete-values-file
    config: #@ clusters.delete_values_file(data.values.gcp.cluster_name, "cluster-state", "state-modified")
  - task: commit-values-file-deletion
    config: #@ git_commit("state-modified", "state-committed", "Delete values file for cluster " + data.values.gcp.cluster_name, "environments/kube-clusters/" + data.values.gcp.cluster_name)
  - put: cluster-state
    params:
      merge: true
      repository: state-committed
  - task: delete-disks
    config: #@ clusters.delete_disks(data.values.gcp.cluster_name)
  serial: true
  serial_groups:
  - #@ data.values.gcp.cluster_name

- name: #@ "create-cluster-" + data.values.gcp.cluster_name
  plan:
  - get: ci-resources
  - get: cluster-state
    passed:
    - #@ "delete-cluster-" + data.values.gcp.cluster_name
    trigger: true
  - task: create-kubernetes-cluster
    config: #@ clusters.create_kubernetes_cluster(data.values.gcp.cluster_name)
  - put: #@ "cluster-" + data.values.gcp.cluster_name + "-staging-event-created"
    params:
      bump: major
  serial: true
  serial_groups:
  - #@ data.values.gcp.cluster_name

- name: generate-cf-for-k8s-values
  on_failure: #@ notify_slack()
  plan:
  - get: cf-for-k8s
    trigger: true
  - get: cluster-state
  - get: ci-resources
  - get: #@ "cluster-" + data.values.gcp.cluster_name + "-staging-event-created"
    passed:
    - #@ "create-cluster-" + data.values.gcp.cluster_name
    trigger: true
  - task: download-kubeconfig
    config: #@ clusters.download_kubeconfig(data.values.gcp.cluster_name)
  - task: generate-default-values
    config: #@ cf_for_k8s.generate_default_values(data.values.gcp.cluster_name)
  - task: generate-loadbalancer-values
    config: #@ cf_for_k8s.generate_loadbalancer_values(data.values.gcp.cluster_name)
  - task: aggregate-cf4k8s-values
    config: #@ cf_for_k8s.aggregate_cf4k8s_values(data.values.gcp.cluster_name, "cluster-state", "state-modified")
  - task: commit-values
    config: #@ git_commit("state-modified", "state-committed", "update/add cf-for-k8s values files")
  - put: cluster-state
    params:
      merge: true
      repository: state-committed
  public: true
  serial_groups:
  - #@ data.values.gcp.cluster_name

- name: #@ "deploy-cf-for-k8s-" + data.values.gcp.cluster_name
  on_failure: #@ notify_slack()
  plan:
  #@ if data.values.enable_cf4k8s_redeploy == "true":
  - get: redeploy-timer
    trigger: true
  #@ end
  - get: eirini-release
  - get: cf-for-k8s
    passed:
    - generate-cf-for-k8s-values
    trigger: true
  - get: cluster-state
    passed:
    - generate-cf-for-k8s-values
    trigger: true
  - get: ci-resources
  - get: cf-k8s-prometheus
  - task: download-kubeconfig
    config: #@ clusters.download_kubeconfig(data.values.gcp.cluster_name)
  - task: delete-cf
    config: #@ cf_for_k8s.delete_cf()
  - task: patch-eirini-release
    config: #@ cf_for_k8s.patch_eirini_release()
  - task: deploy-cf-for-k8s
    config: #@ cf_for_k8s.deploy_cf_for_k8s(data.values.gcp.cluster_name)
  public: true
  serial_groups:
  - #@ data.values.gcp.cluster_name

- name: #@ "smoke-tests-" + data.values.gcp.cluster_name
  on_failure: #@ notify_slack()
  plan:
  #@ if data.values.enable_cf4k8s_redeploy == "true":
  - get: redeploy-timer
    passed:
    - #@ "deploy-cf-for-k8s-" + data.values.gcp.cluster_name
    trigger: true
  #@ end
  - get: cf-for-k8s
    params:
      include_source_tarball: true
    passed:
    - #@ "deploy-cf-for-k8s-" + data.values.gcp.cluster_name
    trigger: true
  - get: cluster-state
    passed:
    - #@ "deploy-cf-for-k8s-" + data.values.gcp.cluster_name
    trigger: true
  - get: eirini-release
    passed:
    - #@ "deploy-cf-for-k8s-" + data.values.gcp.cluster_name
  - task: get-smoke-tests-variables
    config: #@ cf_for_k8s.get_smoke_test_variables(data.values.gcp.cluster_name)
  - task: run-smoke-tests
    config: #@ cf_for_k8s.run_smoke_tests()
  public: true
  serial_groups:
  - #@ data.values.gcp.cluster_name

resource_types:
- #@ resources.registry_image_type("slack-notification", "cfcommunity/slack-notification-resource")

resources:
- #@ resources.slack()
- #@ resources.git("cf-for-k8s", "eirini-forks/cf-for-k8s", "develop", data.values.private_keys.eirini_private_config)
- #@ resources.git("cf-k8s-prometheus", "cloudfoundry/cf-k8s-prometheus", "main")
- #@ resources.git("ci-resources", "cloudfoundry-incubator/eirini-ci")
- #@ resources.git("cluster-state", "cloudfoundry/eirini-private-config", "master", data.values.private_keys.eirini_private_config)
- #@ resources.git("eirini-release", "cloudfoundry-incubator/eirini-release")
- #@ resources.cluster_event_created(data.values.gcp.cluster_name)

#@ if data.values.enable_cf4k8s_redeploy == "true":
- icon: bomb
  name: delete-timer
  source:
    days:
    - Saturday
    start: 12:00 AM
    stop: 1:00 AM
  type: time

- icon: bomb
  name: redeploy-timer
  source:
    start: 12:00 AM
    stop: 1:00 AM
  type: time
#@ end
