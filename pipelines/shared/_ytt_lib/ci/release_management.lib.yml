#@ load("@ytt:data", "data")
#@ load("@ytt:struct", "struct")
#@ load("common.lib.yml", "image_resource", "task_script")

#@ def _build_docker_image(component):
platform: linux
caches:
- path: cache
image_resource: #@ image_resource("vito/oci-build-task")
inputs:
- name: eirini
outputs:
- name: image
params:
  CONTEXT: eirini
  DOCKERFILE: #@ "eirini/docker/" + component + "/Dockerfile"
run:
  path: /bin/sh
  args:
    - -c
    - -e
    - |
      BUILD_ARG_GIT_SHA=$(cat eirini/.git/ref)
      export BUILD_ARG_GIT_SHA
      build
#@ end

#@ def _checkout_eirini_sha():
platform: linux
image_resource: #@ image_resource("eirini/ci")
inputs:
- name: eirini-release
- name: eirini
- name: ci-resources
outputs:
- name: eirini-stable
run: #@ task_script("checkout-sha-by-image.sh")
#@ end

#@ def _create_release():
platform: linux
image_resource: #@ image_resource("eirini/ci")
inputs:
- name: ci-resources
- name: state
- name: eirini-release
- name: eirini-release-version
outputs:
- name: release-output
- name: release-output-yaml
run: #@ task_script("create-release.sh")
#@ end

#@ def _update_version_files(components):
platform: linux
image_resource: #@ image_resource("eirini/ci")
inputs:
- name: eirini
- name: eirini-release
#@ for component in components:
- name: #@ component + "-image"
#@ end
outputs:
- name: eirini-release-updated
params:
  COMPONENT_NAME: eirini
  COMPONENT_REPO: eirini
  IMAGES: #@ " ".join(components)
run: #@ task_script("update-version-files.sh")
#@ end

#@ release_management = struct.make(
#@   build_docker_image=_build_docker_image,
#@   checkout_eirini_sha=_checkout_eirini_sha,
#@   create_release=_create_release,
#@   update_version_files=_update_version_files,
#@ )
