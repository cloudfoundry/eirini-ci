#@ load("@ytt:data", "data")

#@ load("@ci:notifications.lib.yml", "notify_slack")
#@ load("@ci:resources.lib.yml", "resources")
#@ load("@ci:testing.lib.yml", "testing")
#@ load("@ci:clusters.lib.yml", "clusters")
#@ load("@ci:release_management.lib.yml", "release_management")
#@ load("@ci:ci_automation.lib.yml", "ci_automation")

#@ ci_clusters={
#@  "eats-rapid": "rapid",
#@  "eats-regular": "regular",
#@  "eats-stable": "stable",
#@  "integration": "regular",
#@ }

#@ eats_clusters={
#@  "eats-rapid": "rapid",
#@  "eats-regular": "regular",
#@  "eats-stable": "stable",
#@ }

groups:
- name: main
  jobs:
  - run-tests
  - run-integration-tests
  - create-event-reporter-docker-image
  - create-instance-index-env-injector-docker-image
  - create-eirini-controller-docker-image
  - create-api-docker-image
  - create-task-reporter-docker-image
  - create-migration-docker-image
  - create-resource-validator-docker-image
  - update-eirini-version-files
#@ for channel in eats_clusters.values():
  - #@ "deploy-eirini-yamls-" + channel
  - #@ "run-eats-tests-" + channel
#@ end
  - fast-forward-release
- name: bumps
  jobs:
  - bump-go-modules-eirini
- name: gke-clusters
  jobs:
#@ for cluster in ci_clusters.keys():
  - #@ "delete-cluster-" + cluster
  - #@ "create-cluster-" + cluster
#@ end
- name: cloud-controller
  jobs:
  - cloud-controller-tests

jobs:
- name: run-tests
  on_failure: #@ notify_slack()
  plan:
  - in_parallel:
    - get: eirini
      trigger: true
    - get: eirini-release
    - get: golang-lint
      params:
        skip_download: true
      trigger: true
    - get: ci-resources
  - in_parallel:
    - #@ testing.run_unit_tests()
    - #@ testing.run_static_checks()
  public: true

- name: run-integration-tests
  on_failure: #@ notify_slack()
  plan:
  - in_parallel:
    - get: eirini
      passed:
      - run-tests
      trigger: true
    - get: eirini-release
    - get: ci-resources
  - #@ clusters.download_kubeconfig("integration")
  - #@ testing.apply_eirini_crds()
  - #@ testing.run_integration_tests()
  public: true
  serial: true
  serial_groups:
  - integration

#@ for component in data.values.components:
- name: #@ "create-" + component + "-docker-image"
  on_failure: #@ notify_slack()
  plan:
  - get: eirini
    passed:
    - run-integration-tests
    trigger: true
  - #@ release_management.build_docker_image(component)
  - put: #@ component + "-image"
    params:
      image: #@ component + "-image/image.tar"
#@ end

- name: update-eirini-version-files
  on_failure: #@ notify_slack()
  plan:
  - in_parallel:
    - get: eirini-release
    - get: eirini
      passed:
      #@ for component in data.values.components:
      - #@ "create-" + component + "-docker-image"
      #@ end
      trigger: true
    #@ for component in data.values.components:
    - get: #@ component + "-image"
      params:
        skip_download: false
      passed:
      - #@ "create-" + component + "-docker-image"
    #@ end
  - #@ release_management.update_version_files(data.values.components)
  - params:
      repository: eirini-release-updated
    put: eirini-release
  serial: true


#@ for channel in eats_clusters.values():
- name: #@ "deploy-eirini-yamls-" + channel
  on_failure: #@ notify_slack()
  plan:
  - get: eirini-release
    trigger: true
  - get: eirini
    passed:
    - update-eirini-version-files
  - get: ci-resources
  - #@ clusters.download_kubeconfig("eats-" + channel)
  - #@ testing.cleanup_deployment()
  - #@ testing.deploy_eirini_yamls()
  public: true
  serial: true
  serial_groups:
  - #@ channel

- name: #@ "run-eats-tests-" + channel
  on_failure: #@ notify_slack()
  plan:
  - in_parallel:
    - get: eirini-release
      passed:
      - #@ "deploy-eirini-yamls-" + channel
      trigger: true
    - get: eirini
      passed:
      - #@ "deploy-eirini-yamls-" + channel
      trigger: true
    - get: ci-resources
  - #@ clusters.download_kubeconfig("eats-"+channel)
  - #@ testing.run_eats_tests()
  public: true
  serial: true
  serial_groups:
  - #@ channel
#@ end


- name: fast-forward-release
  on_failure: #@ notify_slack()
  plan:
  - get: eirini-release
    passed:
#@ for channel in eats_clusters.values():
    - #@ "run-eats-tests-" + channel
#@ end
    trigger: true
  - get: eirini-release-master
  - params:
      repository: eirini-release
    put: eirini-release-master

- name: cloud-controller-tests
  on_failure: #@ notify_slack()
  plan:
  - in_parallel:
    - get: cloud_controller_ng
      trigger: true
    - get: eirini-release
    - get: ci-resources
  - #@ clusters.download_kubeconfig("integration")
  - #@ testing.apply_eirini_crds()
  - #@ testing.run_rubocop()
  - #@ testing.run_cc_tests()
  public: true
  serial: true
  serial_groups:
  - cc-tests

- name: bump-go-modules-eirini
  on_failure: #@ notify_slack()
  plan:
  - in_parallel:
    - get: bump-day
      trigger: true
    - get: golang-image
    - get: eirini
  - #@ ci_automation.bump_go_modules("eirini")
  - #@ testing.run_unit_tests("repository-updated")
  - #@ testing.run_static_checks("repository-updated")
  - put: eirini
    params:
      repository: repository-updated
  public: true


#@ for cluster, channel in ci_clusters.items():
- name: #@ "delete-cluster-" + cluster
  on_failure: #@ notify_slack()
  plan:
  - get: delete-timer
    trigger: true
  - get: ci-resources
  - #@ clusters.delete_kubernetes_cluster(cluster)
  - get: cluster-state
  - #@ clusters.delete_values_file(cluster)
  - #@ clusters.delete_disks(cluster)
  - put: cluster-state
    params:
      merge: true
      repository: state-modified
  serial: true
  serial_groups:
  - #@ cluster

- name: #@ "create-cluster-" + cluster
  on_failure: #@ notify_slack()
  plan:
  - get: ci-resources
  - get: cluster-state
    passed:
    - #@ "delete-cluster-" + cluster
    trigger: true
  - #@ clusters.create_kubernetes_cluster(cluster, channel.upper())
  - put: #@ "cluster-" + cluster + "-staging-event-created"
    params:
      bump: major
  serial: true
  serial_groups:
  - #@ cluster
#@ end

resource_types:
- #@ resources.registry_image_type("slack-notification", "cfcommunity/slack-notification-resource")

resources:
#@ for cluster in ci_clusters.keys():
- #@ resources.cluster_event_created(cluster)
#@ end
- #@ resources.slack()
- #@ resources.git("cloud_controller_ng", "eirini-forks/cloud_controller_ng", branch="pr-lrp-crds")
- #@ resources.git("ci-resources", "cloudfoundry-incubator/eirini-ci", branch=data.values.repo_branches.eirini_ci)
- #@ resources.git("eirini", "cloudfoundry-incubator/eirini", branch=data.values.repo_branches.eirini, private_key=data.values.private_keys.eirini)
- #@ resources.git("eirini-release-master", "cloudfoundry-incubator/eirini-release", private_key=data.values.private_keys.eirini_release)
- #@ resources.git("eirini-release", "cloudfoundry-incubator/eirini-release", branch="develop", private_key=data.values.private_keys.eirini_release)
- #@ resources.git("cluster-state", "cloudfoundry/eirini-private-config", private_key=data.values.private_keys.eirini_private_config)
- #@ resources.registry_image("golang-image", "golang")
- #@ resources.registry_image("golang-lint", "golangci/golangci-lint")
- #@ resources.eirini_registry_image("api")
- #@ resources.eirini_registry_image("eirini-controller")
- #@ resources.eirini_registry_image("event-reporter")
- #@ resources.eirini_registry_image("instance-index-env-injector")
- #@ resources.eirini_registry_image("migration")
- #@ resources.eirini_registry_image("resource-validator")
- #@ resources.eirini_registry_image("task-reporter")
- name: delete-timer
  source:
    days:
    - Saturday
    start: 12:00 AM
    stop: 1:00 AM
  type: time
  icon: bomb
- name: bump-day
  source:
    days:
    - Wednesday
    start: 12:00 AM
    stop: 11:59 PM
  type: time
  icon: timetable
