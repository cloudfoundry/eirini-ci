jobs:
- name: (( concat "deploy-eirini-yamls-" config.gcp.cluster-name ))
  serial: true
  serial_groups:
  - (( grab config.gcp.cluster-name ))
  on_failure: (( grab slack-notification.on_failure ))
  plan:
  - get: eirini-release
    trigger: true
  - get: eirini
    passed:
    - update-eirini-version-files
  - get: ci-resources
  - task: download-kubeconfig
    params:
      CLUSTER_NAME: (( grab config.gcp.cluster-name ))
      GCP_REGION: (( grab config.gcp.region ))
      GCP_SERVICE_ACCOUNT_JSON: (( grab config.gcp.service-account-json ))
      GCP_ZONE: (( grab config.gcp.zone ))
    config:
      image_resource:
        source:
          repository: google/cloud-sdk
          username: (( grab config.dockerhub.user ))
          password: (( grab config.dockerhub.password ))
        type: docker-image
      platform: linux
      inputs:
        - name: ci-resources
      outputs:
        - name: kube
      run:
        path: /usr/bin/env
        args:
        - bash
        - -c
        - (( file "../../inline-tasks/gcp-download-kubeconfig.sh" ))
  - task: cleanup-deployment
    config:
      image_resource:
        source:
          repository: cloudfoundry/cf-for-k8s-ci
          username: (( grab config.dockerhub.user ))
          password: (( grab config.dockerhub.password ))
        type: docker-image
      container_limits: {}
      inputs:
      - name: eirini-release
      - name: kube
      params:
        KUBECONFIG: "kube/config"
        GOOGLE_APPLICATION_CREDENTIALS: "kube/service-account.json"
      platform: linux
      run:
        path: eirini-release/scripts/cleanup.sh
  - task: deploy-eirini-yamls
    config:
      image_resource:
        source:
          repository: cloudfoundry/cf-for-k8s-ci
          username: (( grab config.dockerhub.user ))
          password: (( grab config.dockerhub.password ))
        type: docker-image
      container_limits: {}
      inputs:
      - name: eirini-release
      - name: kube
      params:
        KUBECONFIG: "kube/config"
        GOOGLE_APPLICATION_CREDENTIALS: "kube/service-account.json"
        WIREMOCK_KEYSTORE_PASSWORD: (( grab config.wiremock.keystore-pass ))
      platform: linux
      run:
        path: eirini-release/scripts/deploy.sh
  public: true
  serial_groups:
  - (( grab config.gcp.cluster-name ))
  on_failure: (( grab slack-notification.on_failure ))
